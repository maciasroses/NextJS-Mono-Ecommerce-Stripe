generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  username String   @unique
  role     UserRole @default(USER)

  orders            Order[]
  customLists       CustomList[]
  stockReservations StockReservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomList {
  id          String  @id @default(uuid())
  name        String
  description String?

  user     User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  products CustomProductsList[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
}

model CustomProductsList {
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String
  customList   CustomList @relation(fields: [customListId], references: [id], onDelete: Cascade)
  customListId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([customListId, productId])
}

enum ProductCategory {
  TOYS
  BOOKS
  CLOTHING
  ELECTRONICS
}

model Product {
  id                      String          @id @default(uuid())
  name                    String
  slug                    String          @unique
  quantity                Int
  category                ProductCategory
  description             String
  priceInCents            Int
  maximumQuantityPerOrder Int

  files                 ProductFile[]
  orders                ProductOnOrder[]
  stockReservations     StockReservation[]
  customProductsList    CustomProductsList[]
  inventoryTransactions InventoryTransaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StockReservation {
  id       String @id @default(uuid())
  quantity Int

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  expiresAt DateTime

  @@unique([userId, productId])
}

model ProductFile {
  id  String @id @default(uuid())
  url String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductOnOrder {
  quantity         Int
  unitPriceInCents Int

  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([productId, orderId])
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id           String      @id @default(uuid())
  status       OrderStatus @default(PENDING)
  totalInCents Int

  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  products ProductOnOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InventoryTransaction {
  id          String @id @default(uuid())
  type        String
  quantity    Int
  description String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
}
